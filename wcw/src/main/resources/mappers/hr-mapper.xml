<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hrMapper">

<!-- 직원 리스트 select (size용) -->
<select id="selectEmployeeList" resultType="Employee" parameterType="_int">
	select e.emp_no, e.name, e.email, e.join_date, d.dept_name, j.job_title, j.job_level,e.intl_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no}
    order by e.join_date desc
</select>

<!-- 직원 리스트 select -->
<select id="selectEmployeeListFilter" resultType="Employee" parameterType="hashmap">
	select e.emp_no, e.name, e.email, e.join_date, d.dept_name, j.job_title, e.intl_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no}
    	<if test='selectVal.equals("no")'>
    		order by e.emp_no
    	</if>
    	<if test='selectVal.equals("date")'>
    		order by e.join_date desc
    	</if>
    	<if test='selectVal.equals("name")'>
    		order by e.name desc
    	</if>	
</select>

<!-- 직원 리스트 select (특정 부서) -->
<select id="selectDeptEmployeeList" resultType="Employee" parameterType="hashmap">
	select e.emp_no, e.name, e.email, e.join_date, j.job_title, e.intl_no, e.phone
	from tb_employee e
        join tb_department d using (dept_no) 
		join tb_company c using (cp_no)
		join tb_job_title j using (job_title_no)
    where j.cp_no = #{cp_no} and d.dept_name = #{dept_name}
</select>

<!-- 직원 상세 정보 select -->
<select id="selectEmployee" resultType="Employee" parameterType="hashmap">
	select e.name, d.dept_name, e.email, e.phone, j.job_title, e.intl_no, e.resign_yn, e.emp_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no} and e.emp_no = #{emp_no}
</select>

<!-- 부서 이름 리스트 select -->
<select id="selectDeptList" resultType="string" parameterType="_int">
	select d.dept_name
	from tb_department d
		join tb_company c using(cp_no)
	where cp_no = #{cp_no}
	order by d.dept_no
</select>

<!-- 부서 이름 리스트(사원이 존재하는 부서만) select -->
<select id="selectAdminDeptList" resultType="string" parameterType="_int">
	select d.dept_name
	from tb_department d
		join tb_company c using(cp_no)
	where cp_no = #{cp_no} and (select count(emp_no) from tb_employee te where te.dept_no = d.dept_no) != 0
	order by d.dept_no
</select>

<!-- 부서 정보 리스트 select -->
<select id="selectDeptAllList" resultType="Dept" parameterType="_int">
	select d.dept_name, d.dept_no, d.dept_date, d.active_yn, d.emp_no,
	(select name from tb_employee e where e.emp_no = d.emp_no) admin_name ,
	d.dept_upper_no,
	(select dept_name from tb_department where d.dept_upper_no = dept_no) dept_upper_name
    from tb_department d join tb_department d2 on d.dept_no = d2.dept_no
	where d.cp_no = 1
    group by d.dept_name, d.dept_no, d.dept_date, d.active_yn, d.emp_no, d.dept_upper_no
	order by d.dept_no
</select>

<!-- 특정 부서 정보 select (1개) -->
<select id="selectOneDepartment" parameterType="map" resultType="Dept">
	select d.dept_no, d.dept_name ,d.cp_no, d.dept_date, d.active_yn, d.emp_no
			, (select name from tb_employee where emp_no = d.emp_no) admin_name
			, (select dept_name from tb_department where d.dept_upper_no = dept_no) dept_upper_name
	from tb_department d
	where cp_no = #{cp_no} and dept_no = #{dept_no}
</select>

<!-- 직위 리스트 select -->
<select id="selectJobList" resultType="string" parameterType="_int">
	select j.job_title
	from tb_job_title j
		join tb_company c using(cp_no)
	where cp_no = #{cp_no}
	order by job_level desc
</select>

<!-- 직원 정보 update / 내선번호 & 퇴사 여부-->
<update id="updateEmployee1" parameterType="hashmap">
	update (select e.intl_no, e.resign_yn
        		from tb_employee e
            		join tb_department d using(dept_no)
            		join tb_job_title j using(job_title_no)
        		where j.cp_no = #{cp_no} and e.emp_no = #{emp_no})
    set intl_no = #{intl_no},
        resign_yn = #{resign_yn}
</update>
<update id="updateEmployee2" parameterType="hashmap">
	update tb_employee
    set dept_no = (select dept_no 
    					from tb_department 
    					where dept_name = #{dept_name} and cp_no = #{cp_no})
    where emp_no = #{emp_no}
</update>
<update id="updateEmployee3" parameterType="hashmap">
	update tb_employee
    set job_title_no = (select job_title_no
    					from tb_job_title
    					where job_title = #{job_title} and cp_no = #{cp_no})
    where emp_no = #{emp_no}
</update>

<!-- 직원 계정 insert -->
<insert id="insertEmployee" parameterType="hashmap">
	insert into tb_employee 
	(emp_no, email, pwd, name, intl_no, phone, join_date, resign_yn, dept_no, job_title_no, hr_yn)
	values 
	(
	(SELECT NVL(MAX(EMP_NO), 99)+1 FROM TB_EMPLOYEE)
	, #{email}
	, #{pwd}
	, #{name}
	, #{intl_no}
	, #{phone}
	, default
	, default
	, (select dept_no from tb_department where dept_name = #{dept_name} and cp_no = #{cp_no})
	, (select job_title_no from tb_job_title where job_title = #{job_title} and cp_no = #{cp_no})
	, default
)
</insert>

<!-- 관리자(인사팀 직원) 리스트 select -->
<select id="selectAdminList" parameterType="_int" resultType="Employee">
	select e.emp_no, e.name, e.email, e.join_date, d.dept_name, j.job_title, e.intl_no, e.resign_yn
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no} and e.hr_yn = 'Y'
</select>

<!-- 관리자 부서 update1 : 기존 관리자 권한이 있던 사원들에게서 관리자 권한 회수 -->
<update id="updateAdmin1" parameterType="_int">
	update tb_employee
    set hr_yn = 'N'
    where hr_yn = 'Y'
    and emp_no in (select te.emp_no from tb_employee te join tb_department td on te.dept_no = td.dept_no where td.cp_no = #{cp_no})
</update>
<!-- 관리자 부서 update2 : 선택한 부서 사원들에게 관리자 권한 부여 -->
<update id="updateAdmin2" parameterType="hashmap">
	update tb_employee
    set hr_yn = 'Y'
    where emp_no in (select te.emp_no
    				from tb_employee te
    					join tb_department td
    				on te.dept_no = td.dept_no
    				where td.cp_no = #{cp_no} and td.dept_name = #{dept_name})
</update>
<insert id="insertDepartment" parameterType="hashmap">
	insert 
	into tb_department 
	(dept_no, cp_no, dept_name, dept_date, active_yn
	<if test="num == -2">
	, dept_upper_no)
	</if>
	<if test="num == -1">
	, emp_no)
	</if>
	<if test="num == -100">
	)
	</if>
	<if test="num == 100">
	, dept_upper_no, emp_no)
	</if>
	
	values 
	((SELECT NVL(MAX(DEPT_NO), 9)+1 FROM TB_DEPARTMENT), #{cp_no}, #{dept_name}, default, default
	<if test="num == -2">
	, #{dept_upper_no})
	</if>
	<if test="num == -1">
	, #{emp_no})
	</if>
	<if test="num == -100">
	)
	</if>
	<if test="num == 100">
	, #{dept_upper_no}, #{emp_no})
	</if>
</insert>

<update id="updateDepartment" parameterType="hashmap">

	
	update tb_department
	set dept_name = #{dept_name}
	<if test="!dept_upper_name.equals('-2') and emp_no != -1">
	, emp_no = #{emp_no}
	, dept_upper_no = (select dept_no from tb_department where dept_name = #{dept_upper_name} and cp_no = #{cp_no})
	</if>
	<if test="!dept_upper_name.equals('-2') and emp_no == -1">
	, dept_upper_no = (select dept_no from tb_department where dept_name = #{dept_upper_name} and cp_no = #{cp_no})
	</if>
	<if test="dept_upper_name.equals('-2') and emp_no != -1">
	, emp_no = #{emp_no}
	</if>
	<if test="dept_upper_name.equals('-2') and emp_no == -1">
	</if>
	, active_yn = #{active_yn}
	where dept_no = #{dept_no}
</update>























































































<!-- ///////////////////이진정////////////////// -->
<!-- 근태조회 -->
<select id="selectAttendance" parameterType="Attendance" resultType="Attendance">
	select * from tb_attendance a
	join tb_employee e using (emp_no)
	where a.ATT_date between #{att_date_start} and #{att_date_end}
</select>

<select id="selectApprovalAttendance" parameterType="Attendance" resultType="Attendance">
	select appr.att_appr_req_date, att.emp_no, att.att_clock_in, att.att_clock_out, appr.att_appr_clock_in, appr.att_appr_clock_out, appr.att_appr_result
		, d.dept_name, e.name
	from tb_attendance_approval appr
	join tb_attendance att on att.att_no = appr.att_no
	join tb_employee e on e.emp_no = att.emp_no
	join tb_department d on d.dept_no = e.dept_no
	where d.cp_no = #{cp_no}
	and appr.ATT_appr_req_date between #{att_date_start} and #{att_date_end}
	<if test='!att_appr_result.equals("0")'>
	and appr.att_appr_result = #{att_appr_result}
	</if>
	<if test='!dept_name.equals("0")'>
	and d.dept_name = #{dept_name}
	</if>
</select>
<select id="selectWeeklyAttendance" parameterType="Attendance" resultType="Attendance">
	select att.*, d.dept_name, e.name from tb_attendance att
	join tb_employee e on e.emp_no = att.emp_no
	join tb_department d on d.dept_no = e.dept_no
	where att.ATT_date between #{att_date_start} and #{att_date_end}
	<if test='!name.equals("0")'>
	and e.emp_no = #{emp_no}
	</if>
	<if test='!dept_name.equals("0")'>
	and d.dept_name = #{dept_name}
	</if>
</select>	

<!-- 부서, 직원성명 선택 -->
<select id="selectDept" resultType="Employee" parameterType="_int" >
	select dept_name, dept_no from tb_department where cp_no = #{cp_no}
</select>
<select id="selectEmp" resultType="Employee" parameterType="_int" >
	select d.dept_name, e.name , e.emp_no
	from tb_employee e
	join tb_department d on e.dept_no=d.dept_no
	where cp_no = #{cp_no}
</select>
</mapper>