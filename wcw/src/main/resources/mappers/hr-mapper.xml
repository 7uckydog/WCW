<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hrMapper">

<!-- 직원 리스트 select (size용) -->
<select id="selectEmployeeList" resultType="Employee" parameterType="_int">
	select e.emp_no, e.name, e.email, e.join_date, d.dept_name, j.job_title, e.intl_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no}
    order by e.join_date desc
</select>

<!-- 직원 리스트 select -->
<select id="selectEmployeeListFilter" resultType="Employee" parameterType="hashmap">
	select e.emp_no, e.name, e.email, e.join_date, d.dept_name, j.job_title, e.intl_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no}
    	<if test='selectVal.equals("no")'>
    		order by e.emp_no
    	</if>
    	<if test='selectVal.equals("date")'>
    		order by e.join_date desc
    	</if>
    	<if test='selectVal.equals("name")'>
    		order by e.name desc
    	</if>	
</select>

<!-- 직원 상세 정보 select -->
<select id="selectEmployee" resultType="Employee" parameterType="hashmap">
	select e.name, d.dept_name, e.email, e.phone, j.job_title, e.intl_no, e.resign_yn, e.emp_no
	from tb_employee e
        join tb_department d using(dept_no) 
		join tb_company c using(cp_no)
		join tb_job_title j using(job_title_no)
    where j.cp_no = #{cp_no} and e.emp_no = #{emp_no}
</select>

<!-- 부서 리스트 select -->
<select id="selectDeptList" resultType="string" parameterType="_int">
	select d.dept_name
	from tb_department d
		join tb_company c using(cp_no)
	where cp_no = #{cp_no}
	order by d.dept_name
</select>

<!-- 직위 리스트 select -->
<select id="selectJobList" resultType="string" parameterType="_int">
	select j.job_title
	from tb_job_title j
		join tb_company c using(cp_no)
	where cp_no = #{cp_no}
	order by job_level desc
</select>

<!-- 직원 정보 update / 내선번호 & 퇴사 여부-->
<update id="updateEmployee1" parameterType="hashmap">
update (select e.intl_no, e.resign_yn
        from tb_employee e
            join tb_department d using(dept_no)
            join tb_job_title j using(job_title_no)
        where j.cp_no = #{cp_no} and e.emp_no = #{emp_no})
    set intl_no = #{intl_no},
        resign_yn = #{resign_yn}
</update>
<update id="updateEmployee2" parameterType="hashmap">
update tb_employee
    set dept_no = (select dept_no 
    					from tb_department 
    					where dept_name = #{dept_name} and cp_no = #{cp_no})
    where emp_no = #{emp_no}
</update>
<update id="updateEmployee3" parameterType="hashmap">
update tb_employee
    set job_title_no = (select job_title_no
    					from tb_job_title
    					where job_title = #{job_title} and cp_no = #{cp_no})
    where emp_no = #{emp_no}
</update>

<insert id="insertEmployee" parameterType="hashmap">
insert into tb_employee 
	(emp_no, email, pwd, name, intl_no, phone, join_date, resign_yn, dept_no, job_title_no, hr_yn)
values 
	(
	(SELECT NVL(MAX(EMP_NO), 99)+1 FROM TB_EMPLOYEE)
	, #{email}
	, #{pwd}
	, #{name}
	, #{intl_no}
	, #{phone}
	, default
	, default
	, (select dept_no from tb_department where dept_name = #{dept_name} and cp_no = #{cp_no})
	, (select job_title_no from tb_job_title where job_title = #{job_title} and cp_no = #{cp_no})
	, default
)
</insert>

</mapper>